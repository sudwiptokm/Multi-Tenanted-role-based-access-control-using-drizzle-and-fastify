{"version":3,"file":"zennv.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport type Zennv<S> = {\n  dotenv: boolean;\n  schema: S;\n  data?: Record<string, any>;\n};\n\nconst cast = {\n  string_to_number: (value: string) => Number(value),\n  string_to_boolean: (value: string) => value === 'true',\n  undefined_to_string: (value: string) => value,\n  undefined_to_number: (value: string) => Number(value),\n  undefined_to_boolean: (value: string) => value === 'true',\n};\n\n// @ts-ignore\nfunction set(obj, prop, value) {\n  return (obj[prop] = value);\n}\n\nexport const main = <S extends z.AnyZodObject>({\n  dotenv = true,\n  schema,\n  data,\n}: Zennv<S>): z.infer<S> => {\n  const processEnv = (data || process.env) as Record<keyof z.infer<S>, string>;\n\n  if (dotenv) {\n    const dotenv = require('dotenv');\n    dotenv.config();\n  }\n\n  const shape = schema.shape;\n\n  const keys = Object.keys(shape) as (keyof z.infer<S>)[];\n\n  const envKeys = Object.keys(processEnv) as (keyof z.infer<S>)[];\n\n  const result = {} as Record<keyof z.infer<S>, any>;\n\n  for (const key of envKeys) {\n    if (keys.includes(key)) {\n      result[key] = processEnv[key];\n    }\n  }\n\n  const env = (schema as z.AnyZodObject).safeParse(result);\n\n  if (env.success) {\n    return env.data;\n  }\n\n  const errors = env.error;\n\n  for (const error of errors.errors) {\n    const path = error.path[0];\n\n    if (error.code === 'invalid_type') {\n      const fnPath = `${error.received}_to_${error.expected}` as keyof typeof cast;\n\n      const fn = cast[fnPath];\n\n      if (!fn) {\n        console.error(error);\n        throw new Error(`No cast function for ${fnPath} - ${path}`);\n      }\n\n      const value = fn(result[path]);\n\n      set(result, path, value);\n    }\n  }\n\n  return (schema as z.AnyZodObject).parse(result);\n};\n\nexport default main;\n"],"names":["cast","string_to_number","value","Number","string_to_boolean","undefined_to_string","undefined_to_number","undefined_to_boolean","main","_ref","dotenv","schema","processEnv","data","process","env","_ref$dotenv","require","config","keys","Object","shape","result","_i","_envKeys","length","key","includes","obj","prop","safeParse","success","_step","_iterator","_createForOfIteratorHelperLoose","error","errors","done","path","code","fnPath","received","expected","fn","console","Error","parse"],"mappings":"8KAQA,IAAMA,EAAO,CACXC,iBAAkB,SAACC,GAAa,OAAKC,OAAOD,IAC5CE,kBAAmB,SAACF,GAAa,MAAe,SAAVA,GACtCG,oBAAqB,SAACH,GAAa,OAAKA,GACxCI,oBAAqB,SAACJ,GAAa,OAAKC,OAAOD,IAC/CK,qBAAsB,SAACL,GAAa,MAAe,SAAVA,IAQ9BM,EAAO,SAAHC,WACfC,OACAC,EAAMF,EAANE,OAGMC,EAFFH,EAAJI,MAE4BC,QAAQC,cAJ9BC,GAAOA,IAOIC,QAAQ,UAChBC,SAWT,IARA,IAEMC,EAAOC,OAAOD,KAFNR,EAAOU,OAMfC,EAAS,GAEfC,IAAAC,EAJgBJ,OAAOD,KAAKP,GAIHW,EAAAC,EAAAC,OAAAF,IAAE,CAAtB,IAAMG,EAAGF,EAAAD,GACRJ,EAAKQ,SAASD,KAChBJ,EAAOI,GAAOd,EAAWc,IAI7B,IA9BWE,EAAKC,EAAM3B,EA8BhBa,EAAOJ,EAA0BmB,UAAUR,GAEjD,GAAIP,EAAIgB,QACN,OAAOhB,EAAIF,KAKb,IAFA,IAEiCmB,EAAjCC,qrBAAAC,CAFenB,EAAIoB,MAEQC,UAAMJ,EAAAC,KAAAI,MAAE,CAAA,IAAxBF,EAAKH,EAAA9B,MACRoC,EAAOH,EAAMG,KAAK,GAExB,GAAmB,iBAAfH,EAAMI,KAAyB,CACjC,IAAMC,EAAYL,EAAMM,gBAAeN,EAAMO,SAEvCC,EAAK3C,EAAKwC,GAEhB,IAAKG,EAEH,MADAC,QAAQT,MAAMA,GACR,IAAIU,8BAA8BL,QAAYF,GAhD/CV,EAqDHN,EArDQO,EAqDAS,EArDMpC,EAmDJyC,EAAGrB,EAAOgB,IAlDpBV,EAAIC,GAAQ3B,GAwDpB,OAAQS,EAA0BmC,MAAMxB"}